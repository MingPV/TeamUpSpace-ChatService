// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: proto/friend/friend.proto

package friend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendServiceClient is the client API for FriendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendServiceClient interface {
	CreateFriend(ctx context.Context, in *CreateFriendRequest, opts ...grpc.CallOption) (*CreateFriendResponse, error)
	FindAllFriends(ctx context.Context, in *FindAllFriendsRequest, opts ...grpc.CallOption) (*FindAllFriendsResponse, error)
	FindAllFriendRequests(ctx context.Context, in *FindAllFriendRequestsRequest, opts ...grpc.CallOption) (*FindAllFriendRequestsResponse, error)
	FindAllFriendsByUserID(ctx context.Context, in *FindAllFriendsByUserIDRequest, opts ...grpc.CallOption) (*FindAllFriendsByUserIDResponse, error)
	FindAllFriendsByIsFriend(ctx context.Context, in *FindAllFriendsByIsFriendRequest, opts ...grpc.CallOption) (*FindAllFriendsByIsFriendResponse, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error)
}

type friendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendServiceClient(cc grpc.ClientConnInterface) FriendServiceClient {
	return &friendServiceClient{cc}
}

func (c *friendServiceClient) CreateFriend(ctx context.Context, in *CreateFriendRequest, opts ...grpc.CallOption) (*CreateFriendResponse, error) {
	out := new(CreateFriendResponse)
	err := c.cc.Invoke(ctx, "/friend.FriendService/CreateFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) FindAllFriends(ctx context.Context, in *FindAllFriendsRequest, opts ...grpc.CallOption) (*FindAllFriendsResponse, error) {
	out := new(FindAllFriendsResponse)
	err := c.cc.Invoke(ctx, "/friend.FriendService/FindAllFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) FindAllFriendRequests(ctx context.Context, in *FindAllFriendRequestsRequest, opts ...grpc.CallOption) (*FindAllFriendRequestsResponse, error) {
	out := new(FindAllFriendRequestsResponse)
	err := c.cc.Invoke(ctx, "/friend.FriendService/FindAllFriendRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) FindAllFriendsByUserID(ctx context.Context, in *FindAllFriendsByUserIDRequest, opts ...grpc.CallOption) (*FindAllFriendsByUserIDResponse, error) {
	out := new(FindAllFriendsByUserIDResponse)
	err := c.cc.Invoke(ctx, "/friend.FriendService/FindAllFriendsByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) FindAllFriendsByIsFriend(ctx context.Context, in *FindAllFriendsByIsFriendRequest, opts ...grpc.CallOption) (*FindAllFriendsByIsFriendResponse, error) {
	out := new(FindAllFriendsByIsFriendResponse)
	err := c.cc.Invoke(ctx, "/friend.FriendService/FindAllFriendsByIsFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*DeleteFriendResponse, error) {
	out := new(DeleteFriendResponse)
	err := c.cc.Invoke(ctx, "/friend.FriendService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServiceServer is the server API for FriendService service.
// All implementations must embed UnimplementedFriendServiceServer
// for forward compatibility
type FriendServiceServer interface {
	CreateFriend(context.Context, *CreateFriendRequest) (*CreateFriendResponse, error)
	FindAllFriends(context.Context, *FindAllFriendsRequest) (*FindAllFriendsResponse, error)
	FindAllFriendRequests(context.Context, *FindAllFriendRequestsRequest) (*FindAllFriendRequestsResponse, error)
	FindAllFriendsByUserID(context.Context, *FindAllFriendsByUserIDRequest) (*FindAllFriendsByUserIDResponse, error)
	FindAllFriendsByIsFriend(context.Context, *FindAllFriendsByIsFriendRequest) (*FindAllFriendsByIsFriendResponse, error)
	DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error)
	mustEmbedUnimplementedFriendServiceServer()
}

// UnimplementedFriendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendServiceServer struct {
}

func (UnimplementedFriendServiceServer) CreateFriend(context.Context, *CreateFriendRequest) (*CreateFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriend not implemented")
}
func (UnimplementedFriendServiceServer) FindAllFriends(context.Context, *FindAllFriendsRequest) (*FindAllFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFriends not implemented")
}
func (UnimplementedFriendServiceServer) FindAllFriendRequests(context.Context, *FindAllFriendRequestsRequest) (*FindAllFriendRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFriendRequests not implemented")
}
func (UnimplementedFriendServiceServer) FindAllFriendsByUserID(context.Context, *FindAllFriendsByUserIDRequest) (*FindAllFriendsByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFriendsByUserID not implemented")
}
func (UnimplementedFriendServiceServer) FindAllFriendsByIsFriend(context.Context, *FindAllFriendsByIsFriendRequest) (*FindAllFriendsByIsFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllFriendsByIsFriend not implemented")
}
func (UnimplementedFriendServiceServer) DeleteFriend(context.Context, *DeleteFriendRequest) (*DeleteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedFriendServiceServer) mustEmbedUnimplementedFriendServiceServer() {}

// UnsafeFriendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServiceServer will
// result in compilation errors.
type UnsafeFriendServiceServer interface {
	mustEmbedUnimplementedFriendServiceServer()
}

func RegisterFriendServiceServer(s grpc.ServiceRegistrar, srv FriendServiceServer) {
	s.RegisterService(&FriendService_ServiceDesc, srv)
}

func _FriendService_CreateFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).CreateFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/CreateFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).CreateFriend(ctx, req.(*CreateFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_FindAllFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).FindAllFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/FindAllFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).FindAllFriends(ctx, req.(*FindAllFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_FindAllFriendRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFriendRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).FindAllFriendRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/FindAllFriendRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).FindAllFriendRequests(ctx, req.(*FindAllFriendRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_FindAllFriendsByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFriendsByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).FindAllFriendsByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/FindAllFriendsByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).FindAllFriendsByUserID(ctx, req.(*FindAllFriendsByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_FindAllFriendsByIsFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllFriendsByIsFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).FindAllFriendsByIsFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/FindAllFriendsByIsFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).FindAllFriendsByIsFriend(ctx, req.(*FindAllFriendsByIsFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.FriendService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServiceServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendService_ServiceDesc is the grpc.ServiceDesc for FriendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friend.FriendService",
	HandlerType: (*FriendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriend",
			Handler:    _FriendService_CreateFriend_Handler,
		},
		{
			MethodName: "FindAllFriends",
			Handler:    _FriendService_FindAllFriends_Handler,
		},
		{
			MethodName: "FindAllFriendRequests",
			Handler:    _FriendService_FindAllFriendRequests_Handler,
		},
		{
			MethodName: "FindAllFriendsByUserID",
			Handler:    _FriendService_FindAllFriendsByUserID_Handler,
		},
		{
			MethodName: "FindAllFriendsByIsFriend",
			Handler:    _FriendService_FindAllFriendsByIsFriend_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _FriendService_DeleteFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/friend/friend.proto",
}
